<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fm.user">

	<resultMap type="userDto" id="userResultMap">
		<id column="FM_USER_NO" property="uNo" />
		<result column="FM_USER_NICKNAME" property="nickName" />
		<result column="FM_USER_EMAIL" property="email" />
		<result column="FM_USER_PASSWORD" property="password" />
		<result column="FM_USER_MOBILE" property="mobile" />
		<result column="FM_USER_ZIP_CODE" property="zipCode" />
		<result column="FM_USER_ADDRESS" property="address" />
		<result column="FM_USER_POINT" property="point" />
		<result column="FM_USER_CRE_DATE" property="createDate"
			javaType="java.util.Date" />
		<result column="FM_USER_SALT" property="salt" />
	</resultMap>
	<!-- //회원정보 페이징카운트 -->
	<select id="getUserTotalCount" resultType="int">
		SELECT
		COUNT(FM_USER_NO)
		FROM FM_USER
	</select>
	<!-- 회원정보 페이징카운트// -->

	<!-- //회원 정보 -->
	<select id="viewUserList" parameterType="map" resultType="map">
		SELECT ubb.*
		FROM(
		    SELECT ROWNUM rnum, ub.*
		    FROM(
		            SELECT u.FM_USER_NO, u.FM_USER_NICKNAME, u.FM_USER_EMAIL, u.FM_USER_MOBILE, u.FM_USER_ZIP_CODE
		            , u.FM_USER_ADDRESS, u.FM_USER_CRE_DATE, u.FM_USER_POINT
		            , b.FM_USER_BMI_WEIGHT, b.FM_USER_BMI_HEIGHT, b.FM_USER_BMI_GENDER
		            FROM FM_USER u , FM_USER_BMI b
		            WHERE u.FM_USER_NO = b.FM_USER_NO
		            ORDER BY u.FM_USER_CRE_DATE DESC) ub
		    ) ubb
		    WHERE ubb.rnum BETWEEN #{start} AND #{end}
	</select>
	<!-- 회원 정보// -->
	
	<!-- //회원 상세정보 -->
	<select id="">
		
	</select>
	<!-- 회원 상세정보// -->
	
	<!-- //회원확인 -->
	<select id="userExist" parameterType="map"
		resultMap="userResultMap">
		SELECT FM_USER_NO,
		FM_USER_NICKNAME, FM_USER_EMAIL,
		FM_USER_POINT, FM_USER_PASSWORD,
		FM_USER_SALT
		FROM FM_USER
		WHERE
		FM_USER_EMAIL =
		#{email}
	</select>
	<!-- 회원확인// -->

	<!-- // 회원가입 -->
	<insert id="userInsertOne"
		parameterType="com.fm.user.model.UserDto" useGeneratedKeys="true"
		keyProperty="uNo">

		<selectKey keyProperty="uNo" resultType="int" order="BEFORE">
			SELECT
			SEQ_FM_USER_NO.NEXTVAL FROM DUAL
		</selectKey>

		INSERT INTO FM_USER
		VALUE(FM_USER_NO, FM_USER_NICKNAME, FM_USER_EMAIL,
		FM_USER_PASSWORD
		, FM_USER_MOBILE, FM_USER_ZIP_CODE, FM_USER_ADDRESS,
		FM_USER_POINT,
		FM_USER_CRE_DATE, FM_USER_SALT)
		VALUES(#{uNo},
		#{nickName}, #{email}
		,
		#{password}, #{mobile}, #{zipCode}, #{address},
		0, SYSDATE, #{salt})
	</insert>


	<insert id="bmiInsertOne" parameterType="com.fm.util.BmiCalc"
		keyProperty="uNo">

		<selectKey keyProperty="bNo" resultType="int" order="BEFORE">
			SELECT
			SEQ_FM_USER_BMI_NO.NEXTVAL FROM DUAL
		</selectKey>

		INSERT INTO FM_USER_BMI
		VALUE(FM_USER_BMI_NO, FM_USER_NO,
		FM_USER_BMI_WEIGHT, FM_USER_BMI_HEIGHT
		, FM_USER_BMI_GENDER,
		FM_USER_BMI_RAW, FM_USER_GOAL_BMI,
		FM_USER_GOAL_CALORY)
		VALUES(#{bNo},
		SEQ_FM_USER_NO.CURRVAL, #{weight},
		#{height}, #{gender},
		#{bRaw},
		#{goalBmi}, #{goalCalory})

	</insert>
	<!-- 회원가입 // -->
	<!-- //제품추천 -->
	<insert id="addRecommendItem" parameterType="int">
		INSERT INTO
		FM_RECOMMAND
		VALUE(FM_USER_BMI_NO, FM_ITEM_NO)
		VALUES((SELECT
		FM_USER_BMI_NO
		FROM FM_USER_BMI
		WHERE FM_USER_NO = #{uNo})
		, (SELECT
		i.FM_ITEM_NO
		FROM FM_USER u
		INNER JOIN FM_USER_BMI ubi
		ON u.FM_USER_NO =
		ubi.FM_USER_NO
		INNER JOIN FM_ITEM i
		ON ubi.FM_USER_GOAL_BMI =
		i.FM_CALORY_GRADE)
		)
	</insert>
	<!-- 제품추천// -->


	<!-- //회원탈퇴 -->
	<delete id="userBmiDelete">
		DELETE FROM FM_USER_BMI
		WHERE FM_USER_NO = (
		SELECT
		FM_USER_NO
		FROM FM_USER
		WHERE FM_USER_EMAIL = #{email})
	</delete>
	<delete id="userDelete">
		DELETE FROM FM_USER
		WHERE FM_USER_EMAIL = #{email}
	</delete>
	<!-- 회원탈퇴// -->

	<!-- //내정보조회 -->
	<select id="userSelectInfo" parameterType="int" resultType="map">
		SELECT u.*, b.*
		FROM FM_USER u INNER JOIN FM_USER_BMI b
		ON u.FM_USER_NO
		= b.FM_USER_NO
		where u.FM_USER_NO = #{uNo}
	</select>
	<!-- 내정보조회// -->

	<!-- //내정보수정 -->
	<update id="userUpdate" parameterType="userDto">
		UPDATE FM_USER
		<set>
			<if test="nickName != ''">FM_USER_NICKNAME = #{nickName},</if>
			<if test="password != ''">FM_USER_PASSWORD = #{password},</if>
			<if test="salt != ''">FM_USER_SALT = #{salt},</if>
		</set>
		WHERE FM_USER_NO = #{uNo}
	</update>
	<!-- 내정보수정// -->

	<!-- //이메일 중복체크 -->
	<select id="checkEmail" parameterType="String" resultType="int">
		SELECT COUNT(*)
		FROM FM_USER
		WHERE FM_USER_EMAIL = #{email}
	</select>
	<!-- 이메일 중복체크// -->

	<!-- //닉네임 중복체크 -->
	<select id="checkNickName" parameterType="String"
		resultType="int">
		SELECT COUNT(*)
		FROM FM_USER
		WHERE FM_USER_NICKNAME =
		#{nickName}
	</select>
	<!-- 닉네임 중복체크// -->

	<!-- //포인트 충전 -->
	<update id="addPoint" parameterType="userDto">
		UPDATE FM_USER
		SET
		FM_USER_POINT = FM_USER_POINT + #{point}
		WHERE FM_USER_NO = #{uNo}
	</update>
	<insert id="pointHisoty" parameterType="com.fm.util.PointAdd"
		keyProperty="uNo">
		INSERT INTO FM_POINT
		VALUES(SEQ_FM_POINT_NO.NEXTVAL,
		#{uNo}, #{pHistory}, SYSDATE)
	</insert>
	<!-- 포인트 충전// -->

	<!-- //포인트 조회 -->
	<select id="myPointChk" parameterType="int" resultType="int">
		SELECT
		FM_USER_POINT
		FROM FM_USER
		WHERE FM_USER_NO = #{uNo}
	</select>
	<!-- 포인트 조회// -->

	<!-- //닉네임 조회 -->
	<select id="myNickNameChk" parameterType="String"
		resultType="String">
		SELECT FM_USER_NICKNAME
		FROM FM_USER
		WHERE FM_USER_NICKNAME =
		#{nickName}
	</select>
	<!-- 닉네임 조회// -->

	<!-- //아이디 찾기 -->
	<select id="fintUserId" parameterType="String"
		resultType="String">
		SELECT FM_USER_EMAIL
		FROM FM_USER
		WHERE FM_USER_MOBILE =
		#{mobile}
	</select>
	<!-- 아이디 찾기// -->

	<!-- //비밀번호 찾기 -->
	<select id="resultUserpwd" parameterType="String"
		resultType="String">
		SELECT FM_USER_PASSWORD
		FROM FM_USER
		WHERE FM_USER_EMAIL =
		#{email}
	</select>
	<!-- 비밀번호 찾기// -->

	<!-- //충전 내역// -->
	<select id="pointHistoryList" parameterType="int"
		resultType="map">
		SELECT FM_POINT_NO, FM_USER_NO, FM_POINT_HISTORY,
		FM_POINT_CRE_DATE
		FROM FM_POINT
		WHERE FM_USER_NO = #{uNo}
		ORDER BY
		FM_POINT_NO DESC
	</select>
	<!-- //충전 내역 -->
	<!-- 메인화면 추천 제품 목록 구성 -->
	<select id="viewRecommendItemList" parameterType="int" resultType="map">
		SELECT i.FM_ITEM_NO, i.FM_CATEGORY_NO, i.FM_ITEM_NAME, i.FM_ITEM_SELLPRICE 
    		, ig.FM_ITEM_STORED_IMG_NAME
		from FM_USER u
		    INNER JOIN FM_USER_BMI ubi
		        ON u.FM_USER_NO = ubi.FM_USER_NO
		    INNER JOIN FM_ITEM i
		        ON (CEIL(ubi.FM_USER_GOAL_CALORY/100) &lt;= i.FM_CALORY_GRADE AND
		            i.FM_CALORY_GRADE &lt; (CEIL(ubi.FM_USER_GOAL_CALORY/100)+1))
		    INNER JOIN FM_ITEM_IMG ig
		        ON i.FM_ITEM_NO = ig.FM_ITEM_NO
		WHERE U.FM_USER_NO = #{uNo}
	</select>
	<!-- //메인화면 추천 제품 목록 구성 -->
	<!-- 베스트 제품 제품 번호 획득 -->
	<select id="viewBestItemList" resultType="int">
		SELECT bil.FM_ITEM_NO
		FROM(
		    SELECT ROWNUM AS "rowNum", bi."SellCount", bi.FM_ITEM_NO
		    FROM (SELECT COUNT(od.FM_ORDER_DETAIL_NO) as "SellCount", i.FM_ITEM_NO
		            FROM FM_ITEM i
		                INNER JOIN FM_ORDER_DETAIL od
		                    ON i.FM_ITEM_NO = od.FM_ITEM_NO
		                INNER JOIN FM_ORDER o
		                    ON o.FM_ORDER_NO = od.FM_ORDER_NO
		                WHERE O.FM_ORDER_STATUS <![CDATA[<>]]> 'CANCEL'
		                GROUP BY i.FM_ITEM_NO
		                ORDER BY "SellCount" DESC) bi)bil
		WHERE bil."rowNum" <![CDATA[<]]> 5
	</select>
	<!-- //베스트 제품 제품 번호 획득 -->
	<!-- 베스트 제품 제품 정보 획득 -->
	<select id="viewTotalBestItemList" parameterType="int" resultType="map">
		SELECT i.FM_ITEM_NO, i.FM_ITEM_NAME, i.FM_ITEM_SELLPRICE, ig.FM_ITEM_STORED_IMG_NAME
		FROM FM_ITEM i
		    INNER JOIN FM_ITEM_IMG ig
		        ON i.FM_ITEM_NO = ig.FM_ITEM_NO
		WHERE i.FM_ITEM_NO = #{iNo}
	</select>
	<!-- //베스트 제품 제품 정보 획득 -->
</mapper>