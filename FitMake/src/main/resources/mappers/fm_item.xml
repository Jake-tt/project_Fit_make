<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fm.item">
	
<sql id="search">
	WHERE FM_ITEM_NAME LIKE '%'||#{keyword}||'%' 
	<choose>
		<when test="uNo == 0">
			AND FM_CATEGORY_NO = #{cNo}
		</when>
		<when test="uNo > 0">
			AND u.FM_USER_NO = ${uNo}
		</when>
		<when test="uNo == -1">
			AND o.FM_ORDER_STATUS <![CDATA[<>]]> 'CANCEL'
		</when>
	</choose>
	
</sql>
	<resultMap type="itemDto" id="itemResultMap">
		<id column="FM_ITEM_NO" property="iNo"/>
		<result column="FM_CATEGORY_NO" property=	"cNo"/>
		<result column="FM_ITEM_NAME" property=		"iName"/>
		<result column="FM_ITEM_CALORY" property=	"iCalory"/>
		<result column="FM_ITEM_RAWPRICE" property=	"iRawprice"/>
		<result column="FM_ITEM_SELLPRICE" property="iSellprice"/>
		<result column="FM_ITEM_COUNT" property=	"iCount"/>
		<result column="FM_CALORY_GRADE" property=	"iCGrade" />
		<result column="FM_ITEM_DETAIL" property=	"iOneDetail"/>
		<result column="FM_USER_NO" property=	"uNo"/>
		<result column="FM_ITEM_STORED_IMG_NAME" property=	"iImgStoredName"/>
	</resultMap>
	
	<insert id="itemInsertOne" parameterType= "itemDto"
		useGeneratedKeys="true" keyProperty="iNo">
		
		<selectKey keyProperty="iNo" resultType="int" order="BEFORE">
			SELECT SEQ_FM_ITEM_NO.NEXTVAL
			FROM DUAL
		</selectKey>
		
			INSERT INTO FM_ITEM
			VALUE(FM_ITEM_NO, FM_ITEM_NAME, FM_ITEM_CALORY, FM_ITEM_RAWPRICE, FM_ITEM_SELLPRICE, FM_ITEM_COUNT
   				, FM_CATEGORY_NO, FM_CALORY_GRADE, FM_ITEM_DETAIL)
			VALUES(#{iNo}, #{iName}, ${iCalory}, 1000, #{iSellprice}, #{iCount}, #{cNo}, #{iCGrade}, #{iOneDetail})
			
	</insert>
	
	<select id="itemSelectList" parameterType="map"	resultMap="itemResultMap">
		SELECT pi.FM_ITEM_NO, pi.FM_ITEM_NAME, pi.FM_ITEM_SELLPRICE, pi.FM_ITEM_COUNT, pi.FM_CATEGORY_NO
		FROM(
			SELECT ROWNUM AS RNUM, ii.FM_ITEM_NO, ii.FM_ITEM_NAME, ii.FM_ITEM_SELLPRICE, ii.FM_ITEM_COUNT, ii.FM_CATEGORY_NO
			FROM(
				SELECT FM_ITEM_NO, FM_ITEM_NAME, FM_ITEM_SELLPRICE, FM_ITEM_COUNT, FM_CATEGORY_NO
				FROM FM_ITEM
				<include refid="search"></include>
			)ii
		)pi
		WHERE pi.RNUM BETWEEN #{start} AND #{end}
	</select>
	
	<select id="itemSelectListGold" parameterType="map"	resultMap="itemResultMap">
		SELECT pi.FM_ITEM_NO, pi.FM_ITEM_NAME, pi.FM_ITEM_SELLPRICE, pi.FM_ITEM_COUNT, pi.FM_CATEGORY_NO
		FROM(
			SELECT ROWNUM AS RNUM, ii.FM_ITEM_NO, ii.FM_ITEM_NAME, ii.FM_ITEM_SELLPRICE, ii.FM_ITEM_COUNT, ii.FM_CATEGORY_NO
			FROM(
				SELECT FM_ITEM_NO, FM_ITEM_NAME, FM_ITEM_SELLPRICE, FM_ITEM_COUNT, FM_CATEGORY_NO
				FROM FM_ITEM
				<include refid="search"></include>
				ORDER BY FM_ITEM_SELLPRICE
			)i
		)pi
		WHERE pi.RNUM BETWEEN #{start} AND #{end}
		
	</select>
	
	<select id="itemSelectListReview" parameterType="map" resultMap="itemResultMap">
		SELECT pi.FM_ITEM_NO, pi.FM_ITEM_NAME, pi.FM_ITEM_SELLPRICE, pi.FM_ITEM_COUNT, pi.FM_CATEGORY_NO
		FROM(
			SELECT ROWNUM AS RNUM, ii.FM_ITEM_NO, ii.FM_ITEM_NAME, ii.FM_ITEM_SELLPRICE, ii.FM_ITEM_COUNT, ii.FM_CATEGORY_NO
			FROM(
				SELECT FM_ITEM_NO, FM_ITEM_NAME, FM_ITEM_SELLPRICE, FM_ITEM_COUNT, FM_CATEGORY_NO
				FROM FM_ITEM
				<include refid="search"></include>
				ORDER BY FM_ITEM_COUNT DESC
			)ii
		)pi
		WHERE pi.RNUM BETWEEN #{start} AND #{end}
	</select>
	
	<select id="itemSelectOne" parameterType="int"
		resultMap="itemResultMap">
		SELECT FM_ITEM_NO, FM_CATEGORY_NO, FM_ITEM_NAME, FM_ITEM_CALORY
			, FM_ITEM_SELLPRICE, FM_ITEM_COUNT
			, FM_CALORY_GRADE, FM_ITEM_DETAIL
		FROM FM_ITEM
		WHERE FM_ITEM_NO = #{iNo}
	</select>
	
	<update id="itemUpdateOne" parameterType="itemDto">
		UPDATE FM_ITEM
		<set>
			<if test="iName != ''">FM_ITEM_NAME = #{iName},</if>
			<if test="iSellprice != ''">FM_ITEM_SELLPRICE = #{iSellprice},</if>
			<if test="iCalory != ''">FM_ITEM_CALORY = #{iCalory},</if>
			<if test="iCount != ''">FM_ITEM_COUNT = #{iCount},</if>
			FM_ITEM_DETAIL = #{iOneDetail}
		</set>
		WHERE FM_ITEM_NO = #{iNo}
	</update>
	
	<delete id="itemDeleteOne" parameterType="int">
		 DELETE FROM FM_ITEM
		 WHERE FM_ITEM_NO = #{value}
	</delete>
	
	
<!--  밑에는 아이템@@@@@@  -->
	
	<insert id="insertFile" parameterType="map">
		INSERT INTO FM_ITEM_IMG
		(FM_ITEM_IMG_NO, FM_ITEM_NO, FM_ITEM_IMG_NAME, FM_ITEM_STORED_IMG_NAME)
		VALUES
		(SEQ_FM_ITEM_IMG_NO.NEXTVAL, ${parentSeq}, #{original_file_name}, #{stored_file_name})
	</insert>
	
	<select id="fileSelectList" parameterType="int" resultType="map">
		SELECT FM_ITEM_IMG_NO, FM_ITEM_NO, FM_ITEM_IMG_NAME, FM_ITEM_STORED_IMG_NAME
		<!-- 		SELECT FM_ITEM_IMG_NO, FM_ITEM_NO, FM_ITEM_IMG_NAME, FM_ITEM_STORED_IMG_NAME -->
		FROM FM_ITEM_IMG
		WHERE FM_ITEM_NO = #{iNo}
	</select>
	
	<select id="fileSelectOne" parameterType="int" resultType="map">
		SELECT FM_ITEM_IMG_NO, FM_ITEM_NO, FM_ITEM_IMG_NAME, FM_ITEM_STORED_IMG_NAME
		FROM FM_ITEM_IMG
		WHERE FM_ITEM_NO = #{iNo}
	</select>
	
	<delete id="fileDelete" parameterType="int">
		DELETE FROM FM_ITEM_IMG
		WHERE FM_ITEM_NO = ${value}
	</delete>
	
	<select id="itemSelectTotalItemCount" parameterType="map" resultType="int" >
		<choose>
			<when test="uNo >= 0">
			SELECT COUNT(i.FM_ITEM_NO)
			FROM FM_ITEM i
				INNER JOIN FM_USER_BMI ubi
		        	ON (CEIL(ubi.FM_USER_GOAL_CALORY/100) &lt;= i.FM_CALORY_GRADE AND
		            	i.FM_CALORY_GRADE &lt; (CEIL(ubi.FM_USER_GOAL_CALORY/100)+1))                   
		        INNER JOIN FM_USER u
	                ON u.FM_USER_NO = ubi.FM_USER_NO 
			</when>
			<when test="uNo == -1" >
				SELECT COUNT(COUNT(i.FM_ITEM_NO))
				FROM FM_ITEM i
				INNER JOIN FM_ORDER_DETAIL od
	                ON i.FM_ITEM_NO = od.FM_ITEM_NO
	            INNER JOIN FM_ORDER o
	                ON o.FM_ORDER_NO = od.FM_ORDER_NO
	            LEFT OUTER JOIN FM_REVIEW r
	            	ON r.FM_ITEM_NO = i.FM_ITEM_NO
			</when>
		</choose>
		<include refid="search"></include>
		<if test="uNo == -1">
			group by i.fm_item_no
		</if>
	</select>
	
	<!-- 실험 중 지우지 말것 -->
<!-- 	<select id="selectRecommendItemCount" parameterType="map" resultType="int" > -->
<!-- 		SELECT COUNT(i.FM_ITEM_NO) -->
<!-- 		FROM FM_ITEM i -->
<!-- 			INNER JOIN FM_USER_BMI ubi -->
<!-- 	        	ON (CEIL(ubi.FM_USER_GOAL_CALORY/100) &lt;= i.FM_CALORY_GRADE AND -->
<!-- 	            	i.FM_CALORY_GRADE &lt; (CEIL(ubi.FM_USER_GOAL_CALORY/100)+1))                    -->
<!-- 	        INNER JOIN FM_USER u -->
<!--                 ON u.FM_USER_NO = ubi.FM_USER_NO -->
<!-- 		<include refid="search"></include> -->
<!-- 		AND u.FM_USER_NO = ${uNo} -->
<!-- 	</select> -->
	
	<!-- 메인화면 추천 제품 목록 구성 -->
	<select id="viewRecommendItemList" parameterType="map" resultMap="itemResultMap" >
		SELECT *
		FROM(
				SELECT ROWNUM AS "rNum", rci.*
				FROM (SELECT i.FM_ITEM_NO, i.FM_CATEGORY_NO, i.FM_ITEM_NAME, i.FM_ITEM_SELLPRICE 
			            , ig.FM_ITEM_STORED_IMG_NAME
			            , COUNT(r.FM_REVIEW_NO) OVER(PARTITION BY i.FM_ITEM_NO ORDER BY i.FM_ITEM_NAME ASC) AS "rCount"
				        FROM FM_USER u
				            INNER JOIN FM_USER_BMI ubi
				                ON u.FM_USER_NO = ubi.FM_USER_NO
				            INNER JOIN FM_ITEM i
				                ON (CEIL(ubi.FM_USER_GOAL_CALORY/100) &lt;= i.FM_CALORY_GRADE AND
				                    i.FM_CALORY_GRADE &lt; (CEIL(ubi.FM_USER_GOAL_CALORY/100)+1))
				            INNER JOIN FM_ITEM_IMG ig
				                ON i.FM_ITEM_NO = ig.FM_ITEM_NO
				            LEFT OUTER JOIN FM_REVIEW r
				                ON i.FM_ITEM_NO = r.FM_ITEM_NO
				            <include refid="search"></include>
				            AND u.FM_USER_NO = #{uNo}
							<choose>
					            <when test="older == 1">
					            	ORDER BY i.FM_ITEM_SELLPRICE ASC
					            </when>
					            <when test="older == 2">
					            	ORDER BY "rCount" DESC
					            </when>
				            </choose>
            		) rci
            )rcil
		WHERE rcil."rNum" BETWEEN #{start} AND #{end}
	</select>
	<!-- //메인화면 추천 제품 목록 구성 -->
	<!-- 베스트 제품 제품 번호 획득 -->
	<select id="viewBestItemNoList" parameterType="map" resultType="int">
		SELECT bil.FM_ITEM_NO
		FROM(
		    SELECT ROWNUM AS "rowNum", bi."SellCount", bi.FM_ITEM_NO
		    FROM (SELECT COUNT(od.FM_ORDER_DETAIL_NO) as "SellCount", i.FM_ITEM_NO
		    			, Count(r.FM_REVIEW_NO) as "reviewCount"
		    		FROM FM_ITEM i
		                INNER JOIN FM_ORDER_DETAIL od
		                    ON i.FM_ITEM_NO = od.FM_ITEM_NO
		                INNER JOIN FM_ORDER o
		                    ON o.FM_ORDER_NO = od.FM_ORDER_NO
		                LEFT OUTER JOIN FM_REVIEW r
		                	ON r.FM_ITEM_NO = i.FM_ITEM_NO
	                    <include refid="search"></include>
	                	AND o.FM_ORDER_STATUS <![CDATA[<>]]> 'CANCEL'
		                GROUP BY i.FM_ITEM_NO
		                ORDER BY "SellCount" DESC) bi)bil
		WHERE bil."rowNum" BETWEEN #{start} AND #{end}
	</select>
	<!-- //베스트 제품 제품 번호 획득 -->
	<!-- 베스트 제품 제품 정보 획득 -->
	<select id="viewTotalBestItemList" parameterType="int" resultMap="itemResultMap">
		SELECT i.FM_ITEM_NO, i.FM_ITEM_NAME, i.FM_ITEM_SELLPRICE, ig.FM_ITEM_STORED_IMG_NAME
		FROM FM_ITEM i
		    INNER JOIN FM_ITEM_IMG ig
		        ON i.FM_ITEM_NO = ig.FM_ITEM_NO
		WHERE i.FM_ITEM_NO = #{iNo}
	</select>
	<!-- //베스트 제품 제품 정보 획득 -->
	<select id="getCategoryName" parameterType="int" resultType="String">
		SELECT FM_CATEGORY_NAME
		FROM FM_CATEGORY
		WHERE FM_CATEGORY_NO = #{cNo}
	</select>
</mapper>